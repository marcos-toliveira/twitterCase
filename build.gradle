plugins {
    id("org.asciidoctor.jvm.convert") version "3.3.0"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.2"
}

version = "0.1"
group = "com.marcoscdo.case.twitter"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.marcoscdo.case.twitter.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.spring:micronaut-spring-annotation")
    annotationProcessor("io.micronaut.spring:micronaut-spring-web-annotation")
    annotationProcessor("io.micronaut.spring:micronaut-spring-boot")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    annotationProcessor("io.dekorate:prometheus-annotations:${dekorateVersion}")
    compileOnly("org.graalvm.nativeimage:svm")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    compileOnly("org.projectlombok:lombok")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-elastic")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-session")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.elasticsearch:micronaut-elasticsearch")
    runtimeOnly("org.slf4j:log4j-over-slf4j:1.7.30")
    implementation("org.apache.logging.log4j:log4j-api:2.13.3")
    implementation("org.apache.logging.log4j:log4j-core:2.13.3")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.dekorate:kubernetes-annotations:${dekorateVersion}")
    implementation("io.dekorate:prometheus-annotations:${dekorateVersion}")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("io.micronaut:micronaut-http-server")
    runtime("io.micronaut.spring:micronaut-spring-web")
    runtime("io.micronaut.spring:micronaut-spring-boot")
    implementation("io.micronaut.data:micronaut-data-spring")
    implementation("io.micronaut.data:micronaut-data-spring-jpa")
    implementation("org.springframework:spring-orm")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
}


application {
    mainClass.set("com.marcoscdo.case.twitter.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}


    dockerBuild{
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative{
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

